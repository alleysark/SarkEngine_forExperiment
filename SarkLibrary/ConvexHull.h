#ifndef __CONVEX_HULL__
#define __CONVEX_HULL__

#include <vector>
#include "core.h"
#include "shapes.h"
#include "primitives.hpp"

namespace sark{

	// convex hull.
	// it can be generated by convex hull builder.
	class ConvexHull : public IShape{
	private:
		// point set of object space convex hull.
		std::vector<Vector3> mPoints;

		// transformed point set.
		std::vector<Vector3> mTransPoints;

		// triangle face set. it can be empty.
		std::vector<TriangleFace16> mFaces;

	public:
		ConvexHull();
		ConvexHull(const std::vector<Vector3>& points);
		ConvexHull(const std::vector<Vector3>& points,
			const std::vector<TriangleFace16>& faces);

		~ConvexHull();

		// get original(not transformed) point set.
		const std::vector<Vector3>& GetPointSet() const;

		// get transformed point set.
		const std::vector<Vector3>& GetTransPointSet() const;

		// get triangle face set.
		const std::vector<TriangleFace16>& GetFaceSet() const;

		// get this shape type
		Type GetType() const override;

		// intersection test with given shape.
		// *note: it does not generate any collision
		// informations then just test the intersection.
		bool IntersectWith(const IShape* shapeB) const override;

		// update points through given transform matrix.
		// transMat is usually world transform.
		void Update(const Matrix4& transMat);
	};

}
#endif