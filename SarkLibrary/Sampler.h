#ifndef __SAMPLER_H__
#define __SAMPLER_H__

#include <GL/glew.h>
#include "core.h"

namespace sark{

	// sampler is a kind of wrapper class.
	// it wraps the sampler id generated through the graphics API.
	// *note: sampler is only available on glsl version 3.3 or higher.
	class Sampler{
	public:
		// available sampler parameter state.
		enum State{
			// wrapping mode
			WRAP_S = GL_TEXTURE_WRAP_S,
			WRAP_T = GL_TEXTURE_WRAP_T,
			WRAP_R = GL_TEXTURE_WRAP_R,

			// minification and magnification filtering modes 
			MIN_FILTER = GL_TEXTURE_MIN_FILTER,
			MAG_FILTER = GL_TEXTURE_MAG_FILTER,

			// LoD and Depth comparison parameters
			MIN_LOD = GL_TEXTURE_MIN_LOD,
			MAX_LOD = GL_TEXTURE_MAX_LOD,
			LOD_BIAS = GL_TEXTURE_LOD_BIAS,
			COMPARE_MODE = GL_TEXTURE_COMPARE_MODE,
			COMPARE_FUNC = GL_TEXTURE_COMPARE_FUNC
		};
		
		// allowed wrapping mode
		enum WrapMode{
			CLAMP = GL_CLAMP,
			CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
			CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER,
			REPEAT = GL_REPEAT,
			MIRRORED_REPEAT = GL_MIRRORED_REPEAT
		};

		// minification and magnification filter algorithms
		enum Filter{
			// nearest neighbour
			NEAREST = GL_NEAREST,

			// bi-linear filtering. it'll blur any aliased textures
			LINEAR = GL_LINEAR,

			// mipmap options (min filter only) below
			NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
			LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
			NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
			LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR
		};

	private:
		// sampler id
		ObjectHandle mSamplerId;

	public:
		// sampler id is automatically generated by constructor
		Sampler();

		// sampler id is automatically deleted by destructor
		~Sampler();

		// bind this sampler
		void Bind(uint16 activeTex = 0) const;


		// set sampler parameter state
		void SetState(State state, integer param);
		// set sampler parameter state
		void SetState(State state, float32 param);
	};

}
#endif